pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
     steps{
       script{
       """ sh
          mvn clean verify sonar:sonar \
          Dsonar.projectKey=Demo \
          Dsonar.host.url=http://3.110.28.172:9000 \
          Dsonar.login=sqp_ad5cda38d9bd3dbd408750a4b4c2b61054ed5fe8  
       """
      }
  }
    }
    stage('Build and Push Docker Image') {
      environment {
        // Set your Docker registry credentials
        DOCKER_REGISTRY_CREDENTIALS = credentials('docker-cred')
        // Set your JFrog Artifactory server and repository details
        ARTIFACTORY_SERVER = 'https://yaseen.jfrog.io/artifactory/'
        ARTIFACTORY_REPO = 'sample'
        // Set Docker image details
        DOCKERFILE_PATH = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile'
        DOCKER_IMAGE_NAME = 'myaseen05/jenkins'
        DOCKER_IMAGE_TAG = 'latest'
}
      steps {
        script {
            // Build Docker image
             def customImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}", "--file=${DOCKERFILE_PATH} .")
             // Authenticate with Docker registry
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: DOCKER_REGISTRY_CREDENTIALS, 
                     usernameVariable: 'DOCKER_REGISTRY_USERNAME', passwordVariable: 'DOCKER_REGISTRY_PASSWORD']]) 
                   {
                        docker.withRegistry("https://${DOCKER_REGISTRY_USERNAME}:${DOCKER_REGISTRY_PASSWORD}@your-docker-registry.com") 
                  // Push Docker image to Docker registry
                   customImage.push()
            
          }
        }
      }
    }
  }
}
